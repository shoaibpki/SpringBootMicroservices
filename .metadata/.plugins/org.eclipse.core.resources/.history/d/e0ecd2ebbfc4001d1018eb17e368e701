package com.dailycodebuffer.OrderService.service;

import com.dailycodebuffer.OrderService.entity.Order;
import com.dailycodebuffer.OrderService.exception.CustomException;
import com.dailycodebuffer.OrderService.external.client.PaymentService;
import com.dailycodebuffer.OrderService.external.client.ProductService;
import com.dailycodebuffer.OrderService.external.request.PaymentRequest;
import com.dailycodebuffer.OrderService.model.OrderRequest;
import com.dailycodebuffer.OrderService.model.OrderResponse;
import com.dailycodebuffer.OrderService.repository.OrderRepository;
import com.dailycodebuffer.PaymentService.model.PaymentResponse;
import com.dailycodebuffer.ProductService.model.ProductResponse;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.time.Instant;

@Service
@Log4j2
public class OrderServiceImpl implements OrderService {

    @Autowired
    OrderRepository orderRepository;

    @Autowired
    ProductService productService;

    @Autowired
    PaymentService paymentService;

    @Autowired
    RestTemplate restTemplate;
    @Override
    public long placeOrder(OrderRequest orderRequest) {
        log.info("Place Order Request {}", orderRequest);
        productService.reduceQuantity(
                orderRequest.getProductId(),
                orderRequest.getQuantity()
        );
        log.info("Creating Order with status CREATED");
        Order order = Order.builder()
                .orderDate(Instant.now())
                .orderStatus("CREATED")
                .quantity(orderRequest.getQuantity())
                .amount(orderRequest.getTotalAmount())
                .productId(orderRequest.getProductId())
                .build();
        order = orderRepository.save(order);
        log.info("Calling Payment Service to complete the Payment");
        PaymentRequest paymentRequest = PaymentRequest.builder()
                .orderId(order.getId())
                .paymentMode(orderRequest.getPaymentMode())
                .amount(orderRequest.getTotalAmount())
                .build();
        String orderStatus = null;
        try {
            paymentService.doPayment(paymentRequest);
            log.info("Payment done Successfully, changing the order status");
            orderStatus = "PLACED";
        } catch (Exception e){
            log.error("Error Occurred in payment. Changing order status to PAYMENT_FAILED ");
            orderStatus = "PAYMENT_FAILED";
        }
        log.info("Order Placed successfully with Order id {}",order.getId());
        order.setOrderStatus(orderStatus);
        orderRepository.save(order);
        return order.getId();
    }

    @Override
    public OrderResponse getOrderDetails(long orderId) {
        log.info("Get order details for order: {}", orderId);
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() ->
                        new CustomException("Order not found for order id:" + orderId,
                                "NOT_FOUND",
                                404));
        log.info("Invoking Product serivce to fetch the product for id: {}", order.getProductId());
        ProductResponse productResponse =
                restTemplate.getForObject(
                        "http://PRODUCT-SERVICE/product/" + order.getProductId(),
                        ProductResponse.class);
        OrderResponse.ProductDetails productDetails = null;
        if (productResponse != null) {
            productDetails = OrderResponse.ProductDetails.builder()
                    .productName(productResponse.getProductName())
                    .productId(productResponse.getProductId())
                    .quantity(productResponse.getQuantity())
                    .price(productResponse.getPrice())
                    .build();
        }
        log.info("Getting payment information from payment service");
        PaymentResponse paymentResponse =
                restTemplate.getForObject(
                        "http://PAYMENT-SERVICE/payment/order/" + order.getId(),
                        PaymentResponse.class);
        OrderResponse.PaymentDetails paymentDetails = null;
        if (paymentResponse != null) {
            paymentDetails = OrderResponse.PaymentDetails.builder()
                .paymentDate(paymentResponse.getPaymentDate())
                .paymentId(paymentResponse.getPaymentId())
                .paymentMode(paymentResponse.getPaymentMode())
                .status(paymentResponse.getStatus())
                .build();
        }
        OrderResponse orderResponse = OrderResponse.builder()
                .orderId(order.getId())
                .orderStatus(order.getOrderStatus())
                .orderDate(order.getOrderDate())
                .amount(order.getAmount())
                .quantity(order.getQuantity())
                .productDetails(productDetails)
                .paymentDetails(paymentDetails)
                .build();
        return orderResponse;
    }
}
